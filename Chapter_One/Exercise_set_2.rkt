#lang sicp

; the most important thing to know about recursion is that you're always substituting the function/parameter with either the predicate or the consequent
;Exercise 1.9
(define (+ a b)
 (if (= a 0) b (inc (+ (dec a) b)))
  )

(+ 4 5)

; using the substitution model, the process generated by the procedure above will look like this:
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc ( + 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9

; this shows that the recursive procedure above uses a recursive process because there're some information hidden
; by the interpreter that are not captured in the variable, but are needed to get the desired result.
; In this case, the state of b doesn't really change. The interpreter has to keep track of the entire chain
; of the procedure, in order to reduce and evaluate the result once a = 0 and b is pased into the innermost
; function call of the chain.



